import json
import os
from datetime import datetime, timedelta

DB_PATH = "database.json"

def init_db():
    if not os.path.exists(DB_PATH):
        with open(DB_PATH, "w") as f:
            json.dump({"commands": [], "products": [], "packs": [], "subscriptions": {}}, f, indent=4)

def load_db():
    with open(DB_PATH, "r") as f:
        return json.load(f)

def save_db(db):
    with open(DB_PATH, "w") as f:
        json.dump(db, f, indent=4)

# Fonctions commandes
def get_commands(db, user_id=None, status_filter=None):
    cmds = db["commands"]
    if user_id is not None:
        cmds = [c for c in cmds if c["user"] == user_id]
    if status_filter is not None:
        cmds = [c for c in cmds if c["status"] != status_filter]
    return cmds

def add_command(db, user_id, product, status="en attente"):
    db["commands"].append({"user": user_id, "product": product, "status": status})
    save_db(db)

def update_command_status(db, user_id, product, new_status):
    for cmd in db["commands"]:
        if cmd["user"] == user_id and cmd["product"].lower() == product.lower():
            cmd["status"] = new_status
            save_db(db)
            return True
    return False

def remove_command(db, user_id, product):
    before = len(db["commands"])
    db["commands"] = [c for c in db["commands"] if not (c["user"] == user_id and c["product"].lower() == product.lower())]
    save_db(db)
    return len(db["commands"]) < before

# Produits
def get_product_price(db, product_name):
    for p in db["products"]:
        if p["name"].lower() == product_name.lower():
            return p["price"]
    return None

def add_product(db, name, price):
    db["products"].append({"name": name, "price": price})
    save_db(db)

# Packs
def get_packs(db):
    return db["packs"]

def add_pack(db, name, price, description):
    db["packs"].append({"name": name, "price": price, "description": description})
    save_db(db)

# Abonnements
def get_subscription(db, user_id):
    return db["subscriptions"].get(str(user_id))

def add_subscription(db, user_id, abo_type, days_duration):
    end_date = (datetime.utcnow() + timedelta(days=days_duration)).strftime("%Y-%m-%d")
    db["subscriptions"][str(user_id)] = {"type": abo_type, "end": end_date}
    save_db(db)

def remove_subscription(db, user_id):
    if str(user_id) in db["subscriptions"]:
        del db["subscriptions"][str(user_id)]
        save_db(db)
        return True
    return False
