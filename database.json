import json
import os

DB_FILE = "database.json"

if not os.path.exists(DB_FILE):
    with open(DB_FILE, "w") as f:
        json.dump({"commands": [], "products": [], "packs": [], "subscriptions": {}}, f)

def load_db():
    with open(DB_FILE, "r") as f:
        return json.load(f)

def save_db(db):
    with open(DB_FILE, "w") as f:
        json.dump(db, f, indent=4)

def get_all_commands():
    db = load_db()
    return db["commands"]

def add_command(user_id, product_name):
    db = load_db()
    db["commands"].append({"user": user_id, "product": product_name, "status": "en attente"})
    save_db(db)

def remove_command(user_id, product_name):
    db = load_db()
    db["commands"] = [c for c in db["commands"] if not (c["user"] == user_id and c["product"].lower() == product_name.lower())]
    save_db(db)

def update_command_status(user_id, product_name, status):
    db = load_db()
    for c in db["commands"]:
        if c["user"] == user_id and c["product"].lower() == product_name.lower():
            c["status"] = status
            save_db(db)
            return True
    return False

def get_commands_by_user(user_id):
    db = load_db()
    return [c for c in db["commands"] if c["user"] == user_id]

def get_commands_not_livree():
    db = load_db()
    return [c for c in db["commands"] if c["status"] != "livr√©e"]

def get_all_products():
    db = load_db()
    return db["products"]

def add_product(name, description, stock, price):
    db = load_db()
    db["products"].append({"name": name, "description": description, "stock": stock, "price": price})
    save_db(db)

def remove_product(name):
    db = load_db()
    before = len(db["products"])
    db["products"] = [p for p in db["products"] if p["name"].lower() != name.lower()]
    save_db(db)
    return len(db["products"]) < before

def get_product(name):
    db = load_db()
    for p in db["products"]:
        if p["name"].lower() == name.lower():
            return p
    return None

def get_all_packs():
    db = load_db()
    return db["packs"]

def remove_pack(name):
    db = load_db()
    before = len(db["packs"])
    db["packs"] = [p for p in db["packs"] if p["name"].lower() != name.lower()]
    save_db(db)
    return len(db["packs"]) < before
